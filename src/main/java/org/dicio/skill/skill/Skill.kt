package org.dicio.skill.skill

import org.dicio.skill.context.SkillContext

/**
 * A skill is the component that scores input and generates output.
 *
 *
 * @param correspondingSkillInfo the [SkillInfo] this [Skill] belongs to
 * @param specificity how specific this skill is in recognizing input, see [Specificity]
 */
abstract class Skill<ScoreResult>(
    val correspondingSkillInfo: SkillInfo,
    val specificity: Specificity,
) {

    /**
     * Matches the user input and calculates a score in range [0, 1].
     *
     * @param ctx the [SkillContext] object to use to access resources, query information from
     * the environment (e.g. get the current locale), read settings, parse numbers, ...
     * @param input raw input from the user
     * @param inputWords normalized input split into words
     * @param normalizedWordKeys the collation keys for all of the input words (in the same order),
     * needed for diacritics-insensitive matching, built by passing inputWords to
     * [org.dicio.skill.util.WordExtractor.normalizeWords]
     * @return a score in range [0, 1] representing how closely this skill matched the user input,
     * along with any data that [generateOutput] may need to generate output, in case this skill
     * turns out to be the best one
     */
    abstract fun score(
        ctx: SkillContext,
        input: String,
        inputWords: List<String>,
        normalizedWordKeys: List<String>,
    ): Pair<Float, ScoreResult>

    /**
     * This will be called if this skill was deemed as the best one which could provide output for
     * what the user requested, based on its score and specificity. This method processes the input
     * previously received by [Skill.score] (and stored in `scoreResult`), and generates output to
     * speak or to show to the user. This will be called in a background thread, so if you need to
     * run something on the main thread make sure to use coroutines or other means.
     *
     * @param ctx the [SkillContext] object to use to access resources, query information from
     * the environment (e.g. get user contacts), read settings, parse numbers, ...
     * @param scoreResult the data previously generated by [score], that contains information about
     * the input
     */
    abstract suspend fun generateOutput(
        ctx: SkillContext,
        scoreResult: ScoreResult,
    ): SkillOutput
}
