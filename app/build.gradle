plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
}

import org.dicio.sentences_compiler.compiler.CompilerBase
import org.dicio.sentences_compiler.main.SentencesCompiler
import org.dicio.sentences_compiler.compiler.CompilerToJava
import org.dicio.sentences_compiler.util.CompilerError

import java.nio.charset.StandardCharsets

android {
    compileSdk 34
    namespace 'org.stypox.dicio'

    defaultConfig {
        applicationId "org.stypox.dicio"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 10
        versionName "0.10"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        // add folders generated by sentencesCompiler task
        sourceSets.main.java.srcDirs += "build/generated/source/sentences/main"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

dependencies {
    // Desugaring
    coreLibraryDesugaring libs.desugar.jdk.libs

    // Android
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.preference.ktx

    // RxJava3
    implementation libs.rxjava
    implementation libs.rxandroid

    // Dicio own libraries
    implementation libs.dicio.skill
    implementation libs.dicio.numbers

    // Vosk
    implementation libs.jna, { artifact { type = "aar" } }
    implementation libs.vosk.android

    // Miscellaneous
    implementation libs.picasso
    implementation libs.unbescape
    implementation libs.jsoup

    // Used by skills
    implementation libs.exp4j

    // Testing
    testImplementation libs.junit
}


task sentencesCompiler {
    doFirst {
        File baseInputDirectory = file("src/main/sentences/")
        File outputDirectory = file("build/generated/source/sentences/main/org/stypox/dicio")
        outputDirectory.mkdirs()

        List<String> locales = new ArrayList<>()
        Set<String> allSectionIds = new HashSet<>()
        for (String localeName :
                baseInputDirectory.list({ dir, name -> new File(dir, name).isDirectory() })) {

            List<String> inputFiles = new ArrayList<>()
            for (File file : new File(baseInputDirectory, localeName).listFiles()) {
                try {
                    // first try to compile each file separately: if it fails, exclude it
                    OutputStreamWriter unusedOutput = new OutputStreamWriter(
                            new ByteArrayOutputStream(), StandardCharsets.UTF_8)
                    String fileString = "UTF-8:${file.absolutePath}"
                    SentencesCompiler.compile(Collections.singletonList(fileString),
                            unusedOutput, unusedOutput, new CompilerBase() {})
                    inputFiles.add(fileString)

                } catch (CompilerError e) {
                    System.err.println("[ERROR] Ignoring invalid ${localeName} sentences file: "
                            + e.getMessage())
                }
            }

            if (inputFiles.isEmpty()) {
                continue
            }
            // there is surely at least one file for this locale: we can add it
            locales.add(localeName)

            OutputStream outputStream = new FileOutputStream(file("${outputDirectory}/Sentences_${localeName}.java"))
            ByteArrayOutputStream sectionIdsStream = new ByteArrayOutputStream()
            SentencesCompiler.compile(
                    inputFiles,
                    new OutputStreamWriter(outputStream, StandardCharsets.UTF_8),
                    new OutputStreamWriter(sectionIdsStream, StandardCharsets.UTF_8),
                    new CompilerToJava("", "org.stypox.dicio", "Sentences_${localeName}", "sections"))
            outputStream.close()
            sectionIdsStream.close()

            String sectionIds = new String(sectionIdsStream.toByteArray(), StandardCharsets.UTF_8)
            allSectionIds.addAll(sectionIds.split(" "))
        }


        OutputStream fileOutputStream = new FileOutputStream(file("${outputDirectory}/SectionsGenerated.java"))
        OutputStreamWriter outputStream = new OutputStreamWriter(fileOutputStream, StandardCharsets.UTF_8)
        outputStream.write("/*\n"
                + " * FILE AUTO-GENERATED BY GRADLE TASK sentencesCompiler.\n"
                + " * DO NOT MODIFY THIS FILE, AS EDITS WILL BE OVERWRITTEN.\n"
                + " */\n"
                + "\n"
                + "package org.stypox.dicio;\n"
                + "import org.dicio.skill.standard.StandardRecognizerData;\n"
                + "import java.util.HashMap;\n"
                + "import java.util.Map;\n")

        outputStream.write("public class SectionsGenerated {\n" +
                "public static final Map<String,Map<String,StandardRecognizerData>> localeSectionsMap=new HashMap<String,Map<String,StandardRecognizerData>>(){{")
        for (String localeName : locales) {
            outputStream.write("put(\"${localeName.toLowerCase()}\",Sentences_${localeName}.sections);")
        }
        outputStream.write("}};\n")

        if (!allSectionIds.isEmpty()) {
            outputStream.write("public static final String ")

            boolean first = true
            for(String sectionId : allSectionIds) {
                if (first) {
                    first = false
                } else {
                    outputStream.write(",")
                }
                outputStream.write("${sectionId}=\"${sectionId}\"")
            }
            outputStream.write(";\n")
        }
        outputStream.write("}\n")
        outputStream.flush()
        fileOutputStream.close()
    }
}
preBuild.dependsOn(sentencesCompiler)
