package org.stypox.dicio.ui.floating

import android.content.Context
import android.content.Intent
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.launch
import org.stypox.dicio.MainActivity
import org.stypox.dicio.di.SkillContextInternal
import org.stypox.dicio.di.SttInputDeviceWrapper
import org.stypox.dicio.di.WakeDeviceWrapper
import org.stypox.dicio.eval.SkillEvaluator
import org.stypox.dicio.io.input.InputEvent
import org.stypox.dicio.io.input.SttState
import org.stypox.dicio.io.wake.WakeState
import org.stypox.dicio.ui.home.InteractionLog

class FloatingWindowViewModel(
    private val context: Context,
    private val skillEvaluator: SkillEvaluator,
    private val sttInputDevice: SttInputDeviceWrapper,
    private val wakeDevice: WakeDeviceWrapper,
    private val skillContext: SkillContextInternal
) : ViewModel() {

    private val _uiState = MutableStateFlow(FloatingUiState())
    val uiState: StateFlow<FloatingUiState> = _uiState.asStateFlow()
    
    // Â≠òÂÇ®ÂΩìÂâçÁöÑASRÊñáÊú¨
    private var currentAsrText = ""
    private var currentTtsText = ""

    init {
        // ÁõëÂê¨ËØ≠Èü≥ËØÜÂà´Áä∂ÊÄÅ
        viewModelScope.launch {
            combine(
                sttInputDevice.uiState,
                wakeDevice.state,
                skillEvaluator.state
            ) { sttState, wakeState, interactionLog ->
                updateUiState(sttState, wakeState, interactionLog)
            }.collect { /* Áä∂ÊÄÅÂ∑≤Âú®updateUiState‰∏≠Êõ¥Êñ∞ */ }
        }
        
        // ÂàùÂßãÂåñSTTÁõëÂê¨
        initializeSttListening()
    }

    /**
     * ÂàùÂßãÂåñSTTÁõëÂê¨ÔºåËÆæÁΩÆ‰∫ã‰ª∂Â§ÑÁêÜÂô®
     */
    private fun initializeSttListening() {
        android.util.Log.d("FloatingWindowViewModel", "üé§ ÂàùÂßãÂåñSTTÁõëÂê¨...")
        
        // È¢ÑÂä†ËΩΩSTTËÆæÂ§áÔºå‰ΩÜ‰∏çËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºàÂú®onClickÊó∂ËÆæÁΩÆÔºâ
        sttInputDevice.tryLoad { inputEvent ->
            // ËøôÈáå‰∏çÂ§ÑÁêÜ‰∫ã‰ª∂ÔºåÈÅøÂÖçÈáçÂ§çÂ§ÑÁêÜ
            android.util.Log.d("FloatingWindowViewModel", "üîÑ È¢ÑÂä†ËΩΩ‰∫ã‰ª∂ÔºàÂøΩÁï•Ôºâ: $inputEvent")
        }
    }
    
    /**
     * Â§ÑÁêÜÊù•Ëá™STTËÆæÂ§áÁöÑËæìÂÖ•‰∫ã‰ª∂
     */
    private fun handleInputEvent(inputEvent: InputEvent) {
        android.util.Log.d("FloatingWindowViewModel", "üìù Êî∂Âà∞ËæìÂÖ•‰∫ã‰ª∂: $inputEvent")
        
        when (inputEvent) {
            is InputEvent.Partial -> {
                // ÈÉ®ÂàÜËØÜÂà´ÁªìÊûú
                val oldText = currentAsrText
                currentAsrText = inputEvent.utterance
                updateCurrentUiState()
                android.util.Log.d("FloatingWindowViewModel", "üéØ ÈÉ®ÂàÜËØÜÂà´: '$oldText' -> '${inputEvent.utterance}'")
            }
            is InputEvent.Final -> {
                // ÊúÄÁªàËØÜÂà´ÁªìÊûú
                val finalText = inputEvent.utterances.firstOrNull()?.first ?: ""
                val oldText = currentAsrText
                currentAsrText = finalText
                updateCurrentUiState()
                android.util.Log.d("FloatingWindowViewModel", "‚úÖ ÊúÄÁªàËØÜÂà´: '$oldText' -> '$finalText'")
                
                // Â§ÑÁêÜËØÜÂà´ÁªìÊûú
                if (finalText.isNotBlank()) {
                    android.util.Log.d("FloatingWindowViewModel", "üöÄ ÂèëÈÄÅÂà∞SkillEvaluator: $finalText")
                    skillEvaluator.processInputEvent(inputEvent)
                } else {
                    android.util.Log.w("FloatingWindowViewModel", "‚ö†Ô∏è ÊúÄÁªàËØÜÂà´ÁªìÊûú‰∏∫Á©∫Ôºå‰∏çÂèëÈÄÅÂà∞SkillEvaluator")
                }
            }
            is InputEvent.None -> {
                // Ê≤°ÊúâËØÜÂà´Âà∞ÂÜÖÂÆπ
                val oldText = currentAsrText
                currentAsrText = ""
                updateCurrentUiState()
                android.util.Log.d("FloatingWindowViewModel", "üîá Ê≤°ÊúâËØÜÂà´Âà∞ÂÜÖÂÆπ: '$oldText' -> ''")
            }
            is InputEvent.Error -> {
                // ËØÜÂà´ÈîôËØØ
                val oldText = currentAsrText
                currentAsrText = "ËØÜÂà´ÈîôËØØ: ${inputEvent.throwable.message}"
                updateCurrentUiState()
                android.util.Log.e("FloatingWindowViewModel", "‚ùå ËØÜÂà´ÈîôËØØ: '$oldText' -> '$currentAsrText'", inputEvent.throwable)
            }
        }
    }

    private fun updateUiState(
        sttState: SttState?,
        wakeState: WakeState?,
        interactionLog: InteractionLog
    ) {
        val currentState = _uiState.value
        
        // ÁÆÄÂåñÁä∂ÊÄÅÈÄªËæëÔºöÂè™Ê†πÊçÆSTTÁä∂ÊÄÅÂà§Êñ≠Ôºå‰∏çÊòæÁ§∫ÊÄùËÄÉ‰∏≠Áä∂ÊÄÅ
        val assistantState = when {
            sttState is SttState.Listening -> AssistantState.LISTENING
            else -> AssistantState.IDLE
        }

        // ‰ªéSkillEvaluatorËé∑ÂèñTTSÊñáÊú¨Ôºå‰ΩÜ‰∏çË¶ÜÁõñASRÊñáÊú¨ÊòæÁ§∫
        val newTtsText = when {
            interactionLog.interactions.isNotEmpty() -> {
                // Ëé∑ÂèñÊúÄÂêé‰∏Ä‰∏™‰∫§‰∫íÁöÑÊúÄÂêé‰∏Ä‰∏™Á≠îÊ°à
                val lastInteraction = interactionLog.interactions.last()
                if (lastInteraction.questionsAnswers.isNotEmpty()) {
                    val lastAnswer = lastInteraction.questionsAnswers.last().answer
                    try {
                        // ‰ΩøÁî®SkillContextË∞ÉÁî®getSpeechOutputËé∑ÂèñÂÆûÈôÖÊñáÊú¨
                        lastAnswer.getSpeechOutput(skillContext)
                    } catch (e: Exception) {
                        android.util.Log.w("FloatingWindowViewModel", "Ëé∑ÂèñËØ≠Èü≥ËæìÂá∫Â§±Ë¥•", e)
                        "ÂõûÂ§çËé∑ÂèñÂ§±Ë¥•"
                    }
                } else {
                    currentTtsText // ‰øùÊåÅÂΩìÂâçTTSÊñáÊú¨
                }
            }
            else -> currentTtsText // ‰øùÊåÅÂΩìÂâçTTSÊñáÊú¨
        }
        
        // Âè™Âú®TTSÊñáÊú¨ÁúüÊ≠£ÂèòÂåñÊó∂Êõ¥Êñ∞
        if (newTtsText != currentTtsText) {
            currentTtsText = newTtsText
        }

        _uiState.value = currentState.copy(
            assistantState = assistantState,
            asrText = currentAsrText,
            ttsText = currentTtsText,
            isWakeWordActive = wakeState is WakeState.Loaded
        )
        
        android.util.Log.d("FloatingWindowViewModel", "üîÑ UIÁä∂ÊÄÅÊõ¥Êñ∞: assistantState=$assistantState, asrText='$currentAsrText', ttsText='$currentTtsText'")
    }
    
    /**
     * Êõ¥Êñ∞ÂΩìÂâçUIÁä∂ÊÄÅÔºà‰øùÊåÅÂÖ∂‰ªñÁä∂ÊÄÅ‰∏çÂèòÔºâ
     */
    private fun updateCurrentUiState() {
        val currentState = _uiState.value
        val newState = currentState.copy(
            asrText = currentAsrText,
            ttsText = currentTtsText
        )
        _uiState.value = newState
        android.util.Log.d("FloatingWindowViewModel", "üí´ ÂΩìÂâçUIÁä∂ÊÄÅÊõ¥Êñ∞: asrText='$currentAsrText', ttsText='$currentTtsText', assistantState=${newState.assistantState}")
    }

    fun onEnergyOrbClick() {
        val currentState = _uiState.value
        android.util.Log.d("FloatingWindowViewModel", "üîò ËÉΩÈáèÁêÉÁÇπÂáªÔºåÂΩìÂâçÁä∂ÊÄÅ: ${currentState.assistantState}")
        
        when (currentState.assistantState) {
            AssistantState.IDLE -> {
                // ÂºÄÂßãÁõëÂê¨
                android.util.Log.d("FloatingWindowViewModel", "üé§ ÂºÄÂßãËØ≠Èü≥ÁõëÂê¨...")
                sttInputDevice.onClick { inputEvent ->
                    handleInputEvent(inputEvent)
                }
            }
            AssistantState.LISTENING -> {
                // ÂÅúÊ≠¢ÁõëÂê¨
                android.util.Log.d("FloatingWindowViewModel", "üõë ÂÅúÊ≠¢ËØ≠Èü≥ÁõëÂê¨...")
                try {
                    sttInputDevice.stopListening()
                    currentAsrText = ""
                    updateCurrentUiState()
                } catch (e: Exception) {
                    android.util.Log.w("FloatingWindowViewModel", "ÂÅúÊ≠¢ÁõëÂê¨Â§±Ë¥•", e)
                }
            }
            AssistantState.THINKING -> {
                // ÊÄùËÄÉ‰∏≠ÔºåÊöÇÊó∂‰∏çÂÅöÂ§ÑÁêÜ
                android.util.Log.d("FloatingWindowViewModel", "ü§î Ê≠£Âú®ÊÄùËÄÉ‰∏≠ÔºåÊöÇ‰∏çÂ§ÑÁêÜÁÇπÂáª")
            }
        }
    }

    fun onSettingsClick() {
        // ÊâìÂºÄ‰∏ªÂ∫îÁî®ÁöÑËÆæÁΩÆÈ°µÈù¢
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
            putExtra("navigate_to", "settings")
        }
        context.startActivity(intent)
    }

    fun onCommandClick(command: String) {
        // ÊâßË°åÂëΩ‰ª§
        when (command) {
            "calculator" -> executeCommand("ÊâìÂºÄËÆ°ÁÆóÂô®")
            "camera" -> executeCommand("ÊâìÂºÄÁõ∏Êú∫")
            "weather" -> executeCommand("‰ªäÂ§©Â§©Ê∞îÊÄé‰πàÊ†∑")
            "alarm" -> executeCommand("ËÆæÁΩÆÈóπÈíü")
            "music" -> executeCommand("Êí≠ÊîæÈü≥‰πê")
            "message" -> executeCommand("ÂèëÈÄÅÊ∂àÊÅØ")
            else -> executeCommand(command)
        }
        
        // ÈöêËóèÂëΩ‰ª§Âª∫ËÆÆ
        _uiState.value = _uiState.value.copy(showCommandSuggestions = false)
    }

    private fun executeCommand(command: String) {
        skillEvaluator.processInputEvent(InputEvent.Final(listOf(Pair(command, 1.0f))))
    }

    fun onDismiss() {
        _uiState.value = _uiState.value.copy(showCommandSuggestions = false)
    }

    fun startListening() {
        sttInputDevice.tryLoad { inputEvent ->
            skillEvaluator.processInputEvent(inputEvent)
        }
        sttInputDevice.onClick { inputEvent ->
            skillEvaluator.processInputEvent(inputEvent)
        }
    }

    fun triggerWakeAnimation() {
        // Ëß¶ÂèëÂî§ÈÜíÂä®Áîª
        val currentState = _uiState.value
        _uiState.value = currentState.copy(
            assistantState = AssistantState.LISTENING,
            energyLevel = 1.0f
        )
    }

    fun updateEnergyLevel(level: Float) {
        val currentState = _uiState.value
        _uiState.value = currentState.copy(energyLevel = level.coerceIn(0f, 1f))
    }
}

data class FloatingUiState(
    val assistantState: AssistantState = AssistantState.IDLE,
    val asrText: String = "",
    val ttsText: String = "",
    val showCommandSuggestions: Boolean = false,
    val isWakeWordActive: Boolean = false,
    val energyLevel: Float = 0.5f // 0.0 Âà∞ 1.0ÔºåÁî®‰∫éÊéßÂà∂ËÉΩÈáèÁêÉÁöÑ‰∫ÆÂ∫¶
)

enum class AssistantState {
    IDLE,       // ÂæÖÊú∫Áä∂ÊÄÅ
    LISTENING,  // Âê¨Âèñ‰∏≠
    THINKING    // ÊÄùËÄÉ‰∏≠
}