package org.stypox.dicio.io.speech

import android.content.Context
import android.speech.tts.TextToSpeech
import android.speech.tts.UtteranceProgressListener
import android.util.Log
import android.widget.Toast
import androidx.annotation.StringRes
import org.dicio.skill.context.SpeechOutputDevice
import org.stypox.dicio.R
import java.util.Locale

class AndroidTtsSpeechDevice(private var context: Context, inputLocale: Locale) : SpeechOutputDevice {
    private var textToSpeech: TextToSpeech? = null
    private var initializedCorrectly = false
    private val runnablesWhenFinished: MutableList<Runnable> = ArrayList()
    private var lastUtteranceId = 0

    // Â§ÑÁêÜËØ≠Ë®ÄÊò†Â∞ÑÔºåÁ°Æ‰øùTTSËÉΩÊ≠£Á°ÆËØÜÂà´
    private val locale: Locale = mapToTtsCompatibleLocale(inputLocale)
    
    init {
        Log.d(TAG, "üîä AndroidTtsSpeechDevice - ÂàùÂßãÂåñTTS:")
        Log.d(TAG, "  üì• ËæìÂÖ•ËØ≠Ë®Ä: $inputLocale (language=${inputLocale.language}, country=${inputLocale.country})")
        Log.d(TAG, "  üîÑ Êò†Â∞ÑÂêéËØ≠Ë®Ä: $locale (language=${locale.language}, country=${locale.country})")
        
        // Ê£ÄÊü•Á≥ªÁªüTTSÊîØÊåÅÊÉÖÂÜµ
        checkSystemTtsSupport()
        
        textToSpeech = TextToSpeech(context) { status: Int ->
            Log.d(TAG, "üîä TTSÂàùÂßãÂåñÂõûË∞É - status: $status")
            if (status == TextToSpeech.SUCCESS) {
                Log.d(TAG, "  ‚úÖ TTSÂàùÂßãÂåñÊàêÂäüÔºåËÆæÁΩÆËØ≠Ë®Ä...")
                textToSpeech?.run {
                    val errorCode = setLanguage(locale)
                    Log.d(TAG, "  üåê setLanguage($locale) ËøîÂõûÁ†Å: $errorCode")
                    if (errorCode >= 0) { // errors are -1 or -2
                        Log.d(TAG, "  ‚úÖ TTSËØ≠Ë®ÄËÆæÁΩÆÊàêÂäü")
                        initializedCorrectly = true
                        setOnUtteranceProgressListener(object :
                            UtteranceProgressListener() {
                            override fun onStart(utteranceId: String) {}
                            override fun onDone(utteranceId: String) {
                                if ("dicio_$lastUtteranceId" == utteranceId) {
                                    // run only when the last enqueued utterance is finished
                                    for (runnable in runnablesWhenFinished) {
                                        runnable.run()
                                    }
                                    runnablesWhenFinished.clear()
                                }
                            }

                            @Deprecated("")
                            override fun onError(utteranceId: String) {
                            }
                        })
                    } else {
                        Log.e(TAG, "‚ùå TTS‰∏çÊîØÊåÅÁöÑËØ≠Ë®Ä: $locale, ÈîôËØØÁ†Å: $errorCode")
                        Log.e(TAG, "  üí° ÈîôËØØÁ†ÅÂê´‰πâ: ${getTtsErrorCodeMeaning(errorCode)}")
                        handleInitializationError(R.string.android_tts_unsupported_language)
                    }
                }
            } else {
                Log.e(TAG, "‚ùå TTSÂàùÂßãÂåñÂ§±Ë¥•: $status")
                Log.e(TAG, "  üí° Áä∂ÊÄÅÁ†ÅÂê´‰πâ: ${getTtsStatusMeaning(status)}")
                handleInitializationError(R.string.android_tts_error)
            }
        }
    }

    override fun speak(speechOutput: String) {
        if (initializedCorrectly) {
            lastUtteranceId += 1
            textToSpeech?.speak(
                speechOutput, TextToSpeech.QUEUE_ADD, null,
                "dicio_$lastUtteranceId"
            )
        } else {
            Toast.makeText(context, speechOutput, Toast.LENGTH_LONG).show()
        }
    }

    override fun stopSpeaking() {
        textToSpeech?.stop()
    }

    override val isSpeaking: Boolean
        get() = textToSpeech?.isSpeaking == true

    override fun runWhenFinishedSpeaking(runnable: Runnable) {
        if (isSpeaking) {
            runnablesWhenFinished.add(runnable)
        } else {
            runnable.run()
        }
    }

    override fun cleanup() {
        textToSpeech?.apply {
            shutdown()
            textToSpeech = null
        }
    }

    private fun handleInitializationError(@StringRes errorString: Int) {
        Toast.makeText(context, errorString, Toast.LENGTH_SHORT).show()
        cleanup()
    }
    
    private fun getTtsErrorCodeMeaning(errorCode: Int): String {
        return when (errorCode) {
            TextToSpeech.LANG_MISSING_DATA -> "LANG_MISSING_DATA (-1): ËØ≠Ë®ÄÊï∞ÊçÆÁº∫Â§±"
            TextToSpeech.LANG_NOT_SUPPORTED -> "LANG_NOT_SUPPORTED (-2): ËØ≠Ë®Ä‰∏çÊîØÊåÅ"
            else -> "Êú™Áü•ÈîôËØØÁ†Å: $errorCode"
        }
    }
    
    private fun getTtsStatusMeaning(status: Int): String {
        return when (status) {
            TextToSpeech.SUCCESS -> "SUCCESS: ÊàêÂäü"
            TextToSpeech.ERROR -> "ERROR: ‰∏ÄËà¨ÈîôËØØ"
            else -> "Êú™Áü•Áä∂ÊÄÅÁ†Å: $status"
        }
    }
    
    private fun checkSystemTtsSupport() {
        Log.d(TAG, "üîç Ê£ÄÊü•Á≥ªÁªüTTSÊîØÊåÅÊÉÖÂÜµ:")
        
        // ÁÆÄÂåñTTSÂºïÊìéÊ£ÄÊü•ÔºåÈÅøÂÖçAPIÂÖºÂÆπÊÄßÈóÆÈ¢ò
        Log.d(TAG, "  üéõÔ∏è Ê£ÄÊü•TTSÂºïÊìéÂèØÁî®ÊÄß...")
        
        // Áõ¥Êé•Ê£ÄÊü•TTSÂàùÂßãÂåñÊòØÂê¶ÊàêÂäü
        var testTts: TextToSpeech? = null
        testTts = TextToSpeech(context) { status ->
            when (status) {
                TextToSpeech.SUCCESS -> {
                    Log.d(TAG, "    ‚úÖ TTSÂºïÊìéÂèØÁî®")
                    testTts?.shutdown()
                }
                else -> {
                    Log.w(TAG, "    ‚ùå TTSÂºïÊìé‰∏çÂèØÁî®ÔºåÁä∂ÊÄÅ: $status")
                }
            }
        }
        
        // Ê£ÄÊü•ÈªòËÆ§TTSÂºïÊìé
        try {
            val defaultEngine = android.provider.Settings.Secure.getString(
                context.contentResolver,
                "tts_default_synth"
            )
            Log.d(TAG, "  üéØ ÈªòËÆ§TTSÂºïÊìé: $defaultEngine")
        } catch (e: Exception) {
            Log.w(TAG, "  ‚ö†Ô∏è Êó†Ê≥ïËé∑ÂèñÈªòËÆ§TTSÂºïÊìé: ${e.message}")
        }
        
        // Ê£ÄÊü•TTSÊï∞ÊçÆÂÆâË£ÖÁä∂ÊÄÅ
        checkTtsDataInstallation()
    }
    
    private fun checkTtsDataInstallation() {
        Log.d(TAG, "  üì¶ Ê£ÄÊü•TTSÊï∞ÊçÆÂÆâË£ÖÁä∂ÊÄÅ...")
        
        // ÂàõÂª∫‰∏¥Êó∂TTSÂÆû‰æãÊù•Ê£ÄÊü•Êï∞ÊçÆ
        var tempTts: TextToSpeech? = null
        tempTts = TextToSpeech(context) { status ->
            if (status == TextToSpeech.SUCCESS) {
                Log.d(TAG, "    ‚úÖ TTSÂºïÊìéÂàùÂßãÂåñÊàêÂäü")
                
                tempTts?.let { tts ->
                    // Ê£ÄÊü•ÂêÑÁßçËØ≠Ë®ÄÊîØÊåÅ
                    val languagesToCheck = listOf(
                        Locale.ENGLISH to "Ëã±ËØ≠",
                        Locale.CHINESE to "‰∏≠Êñá",
                        Locale("cn") to "‰∏≠Êñá(cn)",
                        Locale("ko") to "Èü©ËØ≠",
                        Locale.KOREAN to "Èü©ËØ≠(Ê†áÂáÜ)"
                    )
                    
                    languagesToCheck.forEach { (locale, name) ->
                        val result = tts.isLanguageAvailable(locale)
                        val resultText = when (result) {
                            TextToSpeech.LANG_AVAILABLE -> "‚úÖ ÂÆåÂÖ®ÊîØÊåÅ"
                            TextToSpeech.LANG_COUNTRY_AVAILABLE -> "üü° ÂõΩÂÆ∂ÊîØÊåÅ"
                            TextToSpeech.LANG_COUNTRY_VAR_AVAILABLE -> "üü° Âèò‰ΩìÊîØÊåÅ"
                            TextToSpeech.LANG_MISSING_DATA -> "‚ùå Áº∫Â∞ëÊï∞ÊçÆ"
                            TextToSpeech.LANG_NOT_SUPPORTED -> "‚ùå ‰∏çÊîØÊåÅ"
                            else -> "‚ùì Êú™Áü•Áä∂ÊÄÅ($result)"
                        }
                        Log.d(TAG, "    $name ($locale): $resultText")
                    }
                    
                    tts.shutdown()
                }
            } else {
                Log.e(TAG, "    ‚ùå ‰∏¥Êó∂TTSÂºïÊìéÂàùÂßãÂåñÂ§±Ë¥•: $status")
            }
        }
    }
    
    /**
     * Â∞ÜËæìÂÖ•ÁöÑLocaleÊò†Â∞Ñ‰∏∫TTSÂÖºÂÆπÁöÑLocale
     */
    private fun mapToTtsCompatibleLocale(inputLocale: Locale): Locale {
        return when (inputLocale.language) {
            "cn" -> {
                Log.d(TAG, "  üîÑ Êò†Â∞Ñcn -> zh (‰∏≠Êñá)")
                Locale.CHINESE  // ÊàñËÄÖ Locale("zh", "CN")
            }
            "ko" -> {
                Log.d(TAG, "  üîÑ Êò†Â∞Ñko -> ko (Èü©ËØ≠)")
                Locale.KOREAN  // ‰ΩøÁî®Ê†áÂáÜÈü©ËØ≠Locale
            }
            else -> {
                Log.d(TAG, "  ‚úÖ ‰øùÊåÅÂéüÂßãLocale: $inputLocale")
                inputLocale
            }
        }
    }

    companion object {
        val TAG: String = AndroidTtsSpeechDevice::class.simpleName!!
    }
}
