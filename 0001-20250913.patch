From d8cfb7abb1699b607cdf27f8e0e8f8ac2e3f6c8d Mon Sep 17 00:00:00 2001
From: chenyifen <chenyifen@cvte.com>
Date: Sat, 13 Sep 2025 19:48:18 +0800
Subject: [PATCH] =?UTF-8?q?=E6=9C=AC=E5=9C=B0=E7=BC=96=E8=AF=91=E7=8E=AF?=
 =?UTF-8?q?=E5=A2=83=E9=85=8D=E7=BD=AE20250913?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 gradle.properties         |  6 +++++
 gradle/libs.versions.toml |  2 +-
 settings.gradle.kts       | 51 ++++++++++++++-------------------------
 3 files changed, 25 insertions(+), 34 deletions(-)

diff --git a/gradle.properties b/gradle.properties
index ddcdf26e..82ddaaa1 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -7,6 +7,12 @@
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
 org.gradle.jvmargs=-Xmx1536m
+
+# Network timeout settings
+systemProp.org.gradle.internal.http.connectionTimeout=120000
+systemProp.org.gradle.internal.http.socketTimeout=120000
+systemProp.http.connectionTimeout=120000
+systemProp.http.socketTimeout=120000
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index c3f07c12..d1db3dec 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -15,7 +15,7 @@ dagger = "2.55"
 hilt = "1.2.0"
 jacksonDataformatYaml = "2.15.2"
 jacksonModuleKotlin = "2.15.2"
-java = "21"
+java = "17"
 jna = "5.14.0"
 jsoup = "1.18.3"
 kotest = "5.8.1"
diff --git a/settings.gradle.kts b/settings.gradle.kts
index 216659b2..a1111498 100644
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -1,5 +1,5 @@
-import me.champeau.gradle.igp.gitRepositories
-import org.eclipse.jgit.api.Git
+// import me.champeau.gradle.igp.gitRepositories
+// import org.eclipse.jgit.api.Git
 import java.io.FileInputStream
 import java.nio.file.Files
 import java.nio.file.Path
@@ -22,7 +22,7 @@ pluginManagement {
 
 plugins {
     // not using version catalog because it is not available in settings.gradle.kts
-    id("me.champeau.includegit") version "0.1.6"
+    // id("me.champeau.includegit") version "0.2.0" // Temporarily disabled due to network issues
 }
 
 dependencyResolutionManagement {
@@ -80,39 +80,24 @@ if (localProperties.getOrDefault("useLocalDicioLibraries", "") == "true") {
     }
 
 } else {
-    // if the repo has already been cloned, the gitRepositories plugin is buggy and doesn't
-    // fetch the remote repo before trying to checkout the commit (in case the commit has changed),
-    // and doesn't clone the repo again if the remote changed, so we need to do it manually
+    // includegit plugin is disabled due to network issues
+    // Using local dependencies instead
+    println("Warning: includegit plugin is disabled. Make sure you have the required dependencies locally.")
+    
+    // Fallback: try to use local dependencies if they exist
     for (repo in includeGitRepos) {
-        val file = File("$rootDir/checkouts/${repo.name}")
-        if (file.isDirectory) {
-            val git = Git.open(file)
-            val sameRemote = git.remoteList().call()
-                .any { rem -> rem.urIs.any { uri -> uri.toString() == repo.uri } }
-            if (sameRemote) {
-                // the commit may have changed, fetch again
-                git.fetch().call()
-            } else {
-                // the remote changed, delete the repository and start from scratch
-                println("Git: remote for ${repo.name} changed, deleting the current folder")
-                file.deleteRecursively()
-            }
-        }
-    }
-
-    gitRepositories {
-        for (repo in includeGitRepos) {
-            include(repo.name) {
-                uri.set(repo.uri)
-                commit.set(repo.commit)
-                autoInclude.set(false)
-                includeBuild("") {
-                    dependencySubstitution {
-                        substitute(module("git.included.build:${repo.name}"))
-                            .using(project(repo.projectPath))
-                    }
+        val localPath = "../${repo.name}"
+        val localFile = File(rootDir, localPath)
+        if (localFile.exists() && localFile.isDirectory) {
+            println("Using local dependency: ${repo.name} from $localPath")
+            includeBuild(localPath) {
+                dependencySubstitution {
+                    substitute(module("git.included.build:${repo.name}"))
+                        .using(project(repo.projectPath))
                 }
             }
+        } else {
+            println("Warning: Local dependency not found: $localPath")
         }
     }
 }
-- 
2.39.5 (Apple Git-154)

